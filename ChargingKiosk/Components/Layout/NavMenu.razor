@implements IDisposable

@inject NavigationManager NavigationManager

<MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
    <MudDrawerHeader>
        <MudText Typo="Typo.h6">Solar Charging Kiosk</MudText>
    </MudDrawerHeader>
    <MudNavMenu>
        <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
        <MudNavLink Href="/slots" Icon="@Icons.Material.Filled.Outlet">Charging Slots</MudNavLink>
        <AuthorizeView>
            <Authorized>
                <MudNavLink Href="/admin" Icon="@Icons.Material.Filled.Dashboard">Admin Panel</MudNavLink>
                <MudNavLink Href="/Account/Manage" Icon="@Icons.Material.Filled.Person">@context.User.Identity?.Name</MudNavLink>
            </Authorized>
            <NotAuthorized>
                <MudNavLink Href="/Account/Login" Icon="@Icons.Material.Filled.Login">Login</MudNavLink>
            </NotAuthorized>
        </AuthorizeView>
    </MudNavMenu>
</MudDrawer>

@code {
    private bool _drawerOpen = false;

    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}